---
title: "Multivariate Relandscaping"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(readxl)
library(factoextra)
#install.packages("factoextra")
```

# Re-landscaping Experiment Multivariate Analysis

## Arthropods

Thank you to the team for cleaning up the vacuum data so well! Let's directly load their cleaned up file.

```{r}
load(file = "Vacuum_Primary.Rdata")
Vacuum_Arthropods
```

### Data Prep: Make the species x sample matrix (matrices)

The most unique column here (since arthropods are very difficult to ID to species), is going to be code.

```{r}
Wide <- Vacuum_Arthropods |> 
  select(Sample_ID, code, count) |> 
  pivot_wider(names_from = code, values_from = count, values_fill = 0)

Bug_Matrix <- as.matrix(Wide[,-1])
rownames(Bug_Matrix) <- Wide$Sample_ID
```

In playing around with this data and multivariate methods, I found a few modifications to this dataset to be useful:

Many samples had very low abundance, so I thought it would be useful to pool samples by species.

```{r}
Plant_Pool <- Vacuum_Arthropods |>  
  separate(Sample_ID, into = c("Native", "Plant", "Rep"), sep = "_") |> 
  select(Native, Plant, Rep, count, code) |> 
  group_by(Native, Plant, code) |> 
  summarize(count = sum(count)) |> 
  mutate(Sample = paste(Native, Plant, sep = "_")) |> 
  ungroup() |> 
  select(Sample, code, count) |> 
  pivot_wider(names_from = code, values_from = count, values_fill = 0)

Plant_Bug_Matrix <- as.matrix(Plant_Pool[,-1])
rownames(Plant_Bug_Matrix) <- Plant_Pool$Sample

```

2.  Many species were only seen once, on one plant. Since these are not going to be useful for calculating similarity, This dataframe removes them.

```{r}
Common_Arth <- Vacuum_Arthropods |> 
  group_by(code) |> 
  summarize(count = sum(count)) |> 
  filter(count > 1) |> 
  select(code) |> left_join(Vacuum_Arthropods) |> 
  
  # same code as above
  separate(Sample_ID, into = c("Native", "Plant", "Rep"), sep = "_") |> 
  select(Native, Plant, Rep, count, code) |> 
  group_by(Native, Plant, code) |> 
  summarize(count = sum(count)) |> 
  mutate(Sample = paste(Native, Plant, sep = "_")) |> 
  ungroup() |> 
  select(Sample, code, count) |> 
  pivot_wider(names_from = code, values_from = count, values_fill = 0)

Common_Matrix <- as.matrix(Common_Arth[,-1])
rownames(Common_Matrix) <- Common_Arth$Sample
```

### PCoA

#### Step 1: Calculate the distance matrix for distance between samples.

```{r}
# way to do it so you can get a dendrogram plot
Bug.eu <- dist(Bug_Matrix, method = "euclidean")

plot(hclust(Bug.eu))

# Way to do it so you can get eigenvalues/goodness of fit
Bug.bc <- vegdist(Bug_Matrix, method = "bray")
```

#### Step 2: Calculate the principal coordinates axes

##### Quick and Dirty

```{r}
Bug.pco <- cmdscale(Bug.eu, k = 2)

Bug.pco.gg <- data.frame(Bug.pco) |> mutate(site = rownames(Bug.pco)) |> 
  mutate(Sample_ID2 = site) |> 
  separate(Sample_ID2, into = c("Native", "Plant", "Rep"), sep = "_")
```

#### Step 3: Visualize your results

```{r}
ggplot(Bug.pco.gg) + 
  aes(x = X1, y = X2, label = site) + 
  geom_text() + 
  labs(x = "PCoA1", y = "PCoA2")
```

```{r}
ggplot(Bug.pco.gg) + 
  aes(x = X1, y = X2, label = Plant, color = Native) + 
  geom_text() + 
  labs(x = "PCoA1", y = "PCoA2")

```

##### Eigenvalue Way

```{r}
Bug.pco <- cmdscale(Bug.bc, eig = TRUE)
scores(Bug.pco)
```

```{r}
Bug.pco.gg <- 
  data.frame(scores(Bug.pco)) |> 
  mutate(sample = rownames(scores(Bug.pco))) |> 
  mutate(Sample_ID2 = sample) |> 
  separate(Sample_ID2, into = c("Native", "Plant", "Rep"), sep = "_")

ggplot(Bug.pco.gg) + 
  aes(x = Dim1, y = Dim2, label = sample) + 
  geom_text() + 
  labs(x = "PCoA1", y = "PCoA2")

ggplot(Bug.pco.gg) + 
  aes(x = Dim1, y = Dim2, label = Plant, color = Native) + 
  geom_text() + 
  labs(x = "PCoA1", y = "PCoA2")
```

```{r}
Bug.pco$GOF
```

#### Step 4: Tinker

What do you think? Play around with using the different matrices I provided above, and with different distance algorithms. Do any come up with something more useful looking?

Options: "manhattan", "euclidean", "canberra", "clark", "bray", "kulczynski", "jaccard", "gower", "altGower", "morisita", "horn", "mountford", "raup", "binomial", "chao", "cao", "mahalanobis", "chisq", "chord", "hellinger", "aitchison", or "robust.aitchison". Descriptions: https://rdrr.io/cran/vegan/man/vegdist.html

### NMDS

#### Step 1: Calculate the NMDS scores

```{r}

# I recommend starting with this one. 
Plant_Bug_Matrix

Plant.Bug.nmds  <- metaMDS(Plant_Bug_Matrix, distance = "man")
# same options for distance as vegdist

Common.nmds  <- metaMDS(Common_Matrix, distance = "man")

```

#### Step 2: Preliminary visual for assessment, go back and tinker if looks weird

```{r}
plot(Common.nmds, type = "t", display = "sites")

plot(Common.nmds, type = "p", display = c("site", "species"))
```

#### Step 3: Extract Site and Species scores for better visuals

Add information back in about treatments, etc.

```{r}
scores(Plant.Bug.nmds)

Site_scores <- 
  data.frame(scores(Plant.Bug.nmds)$sites) |> 
  mutate(Site = rownames(scores(Plant.Bug.nmds)$sites)) |> 
  separate(Site, into = c("Native", "Species"), sep = "_")

Species_scores <- 
  data.frame(scores(Plant.Bug.nmds)$species) |>
  mutate(Species = rownames(scores(Plant.Bug.nmds)$species))
```

#### Step 4: Nice Visualization

```{r}
NMDS_plot <- ggplot() + 
  geom_text(data = Site_scores, aes(x = NMDS1, y = NMDS2, label = Species, color = Native), cex = 3) + 
  geom_point(data = Species_scores, aes(x = NMDS1, y = NMDS2, label = Species))
```

Try plotting with hulls to see how much the groups overlap.

```{r}
grp.Nat <- Site_scores[Site_scores$Native == "NATIVE", ][chull(Site_scores[Site_scores$Native == 
    "NATIVE", c("NMDS1", "NMDS2")]), ]  # hull values for grp A
grp.NonNat <- Site_scores[Site_scores$Native == "NN", ][chull(Site_scores[Site_scores$Native == 
    "NN", c("NMDS1", "NMDS2")]), ]  # hull values for grp B

hull.data <- rbind(grp.Nat, grp.NonNat)  #combine grp.a and grp.b
hull.data


NMDS_plot + 
  geom_polygon(data = hull.data, aes(x = NMDS1, y = NMDS2, color = Native, fill = Native), alpha = 0.1)
```

### PCA

#### Step 1: Calculate the PCA

```{r}
Common.pca <- prcomp(Common_Matrix, scale = TRUE)
```

#### Step 2: Examine the results

How much of the variance between samples is captured by each principal component axis?

Optimally, you should have \~80% of the variance explained by the axes you decide to keep. If the sum of your first two axes is over 70%, you're doing pretty good! If you have to keep more than three axes, you might be stretching a bit.

```{r}
fviz_eig(Common.pca)
```

#### Step 3: Visualize and look for patterns

```{r}
fviz_pca_ind(Common.pca)

fviz_pca_ind(
  Common.pca, 
  axes = c(1, 2), # change which PCA axes you're viewing here
             
  col.ind = "cos2", # Color by the quality of representation
             
  gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             
  repel = TRUE     # Avoid text overlapping
)
# brighter colors in this one mean that sample or species is more correlated with that particular axis. 
```

```{r}
fviz_pca_var(Common.pca)

fviz_pca_var(Common.pca,
             col.var = "contrib", # Color by contributions to the PC
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
             )

```

This plot can be useful for when you have fewer variables.

```{r}
fviz_pca_biplot(Bug.pca)
```

## Quadrats

### Data Prep

```{r}
load(file = "Quad_Combined_Clean.Rdata")

Quad_Combined_Clean
```

All the data

```{r}
Quad_Mat <- Quad_Combined_Clean |> 
  mutate(Sample_ID = paste(Date, Block, Treatment, Quad, Turf, sep = "_")) |> 
  select(Sample_ID, Species_Code, Count) |> 
  pivot_wider(names_from = Species_Code, values_from = Count, values_fill = 0)

Quad_Matrix <- as.matrix(Quad_Mat[,-1])
rownames(Quad_Matrix) <- Quad_Mat$Sample_ID

```

Excluding Spring 2018

```{r}
Quad_Mat_noSp <- Quad_Combined_Clean |> 
  filter(Date != "Spring 2018") |> 
  mutate(Sample_ID = paste(Date, Block, Treatment, Quad, Turf, sep = "_")) |> 
  select(Sample_ID, Species_Code, Count) |> 
  pivot_wider(names_from = Species_Code, values_from = Count, values_fill = 0)

Quad_Matrix_noSp <- as.matrix(Quad_Mat_noSp[,-1])
rownames(Quad_Matrix_noSp) <- Quad_Mat_noSp$Sample_ID

```

### PCoA

```{r}
Quad_Matrix 

Quad.bc <- vegdist(Quad_Matrix, method = "bray")

Quad.pco <- cmdscale(Quad.bc, eig = TRUE)
scores(Quad.pco)
```

```{r}
Quad.pco.gg <- 
  data.frame(scores(Quad.pco)) |> 
  mutate(sample = rownames(scores(Quad.pco))) |> 
  mutate(Sample_ID2 = sample) |> 
  separate(Sample_ID2, into = c("Season", "Block", "Native", "Quad", "Turf"), sep = "_")

ggplot(Quad.pco.gg) + 
  aes(x = Dim1, y = Dim2, label = Quad) + 
  geom_text() + 
  labs(x = "PCoA1", y = "PCoA2")
```

```{r}
ggplot(Quad.pco.gg) + 
  aes(x = Dim1, y = Dim2, shape = Native, color = Season) + 
  geom_point() + 
  labs(x = "PCoA1", y = "PCoA2")
```

### NMDS

```{r}

```

### PCA

```{r}

```

## Transects

### Data Prep

```{r}
load(file = "TRANSECT_Primary.RData")
```

```{r}
Transect$Date |> unique()

Transect_Step1 <- Transect |> 
  mutate(Block = case_when(
    `Previous Veg.` == "No Turf" & 
      Treatment == "NonNative"  ~ 1,
    `Previous Veg.` == "No Turf" & 
      Treatment == "Native" ~ 1,
    `Previous Veg.` == "Turf" & 
      Treatment == "NonNative" & 
      (Distance < 21 ) ~ 2,
    `Previous Veg.` == "Turf" & 
      Treatment == "NonNative" & 
      (Distance > 21 ) ~ 3,
        `Previous Veg.` == "Turf" & 
      Treatment == "Native" & 
      (Distance < 21 ) ~ 2,
    `Previous Veg.` == "Turf" & 
      Treatment == "Native" & 
      (Distance > 21 ) ~ 3
  )) |> 
  mutate(Sample_ID = paste(Block, Treatment, `Transect ID`, Date)) |> 
  select(Sample_ID, `Species Code`, Distance) 


Transect_Step2 <- Transect_Step1 |> 
  group_by(Sample_ID, `Species Code`) |> 
  summarize(
    n = n()
  )

Transect_Step3 <- Transect_Step1 |> 
  select(Sample_ID, Distance) |> 
  distinct() |> 
  group_by(Sample_ID) |> 
  summarize(
    total = n()
  )

Transect_Step4 <- 
  full_join(Transect_Step2, Transect_Step3) |> 
  mutate(PerCov = n/total) |> 
  select(Sample_ID, `Species Code`, PerCov)

Transect_Mat <- Transect_Step4 |> pivot_wider(names_from = `Species Code`, values_from = PerCov, values_fill = 0)

Transect_Matrix <- as.matrix(Transect_Mat[,-1])
rownames(Transect_Matrix) <- Transect_Mat$Sample_ID
```

### PCoA

```{r}
Quad_Matrix 

Tra.bc <- vegdist(Transect_Matrix, method = "bray")

Tra.pco <- cmdscale(Tra.bc, eig = TRUE)
scores(Tra.pco)
```

### NMDS

```{r}

```

### PCA

```{r}
Transect.pca <- prcomp(Transect_Matrix, scale = TRUE)
```

```{r}
fviz_eig(Transect.pca)
```

```{r}
fviz_pca_ind(Transect.pca)

fviz_pca_ind(
  Transect.pca, 
  axes = c(1, 2), # change which PCA axes you're viewing here
             
  col.ind = "cos2", # Color by the quality of representation
             
  gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             
  repel = TRUE     # Avoid text overlapping
)
# brighter colors in this one mean that sample or species is more correlated with that particular axis. 
```

# BONEYARD

```{r}
ggplot(Vacuum_Arthropods) + aes(x = Sample_ID, y = count, fill = code) + 
  geom_col() + 
  theme(legend.position = "none")


ggplot(Vacuum_Arthropods) + aes(x = code, y = count, fill = Sample_ID) + 
  geom_col() + 
  theme(legend.position = "none")
  
```
